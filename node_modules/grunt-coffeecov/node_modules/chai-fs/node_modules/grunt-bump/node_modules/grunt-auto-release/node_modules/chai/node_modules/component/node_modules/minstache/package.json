{
  "name": "minstache",
  "version": "0.0.1",
  "description": "Mini mustache template engine",
  "keywords": [
    "mustache",
    "template",
    "engine"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "dependencies": {
    "commander": "1.0.4"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "bin": {
    "minstache": "bin/minstache"
  },
  "main": "index",
  "readme": "\n# minstache\n\n  Mini mustache template engine.\n\n## Installation\n\n    $ npm install minstache\n    $ component install visionmedia/minstache\n\n## minstache(1)\n\n  The `minstache(1)` executable can compile a file to a valid \n  stand-alone commonjs module for you, there's no need to have minstache\n  as a dependency:\n\n  hello.mustache:\n\n```\nHello {{name}}! {{^authenticated}}<a href=\"/login\">login</a>{{/authenticated}}\n```\n\n  or the following is valid:\n\n```\nHello {name}! {^authenticated}<a href=\"/login\">login</a>{/authenticated}\n```\n\n  convert it:\n\n```\n$ minstache < hello.mustache > hello.js\n```\n\n  hello.js:\n\n```js\nmodule.exports = function anonymous(obj) {\n\n  function escape(html) {\n    return String(html)\n      .replace(/&/g, '&amp;')\n      .replace(/\"/g, '&quot;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  };\n\n  function section(obj, prop, negate, str) {\n    var val = obj[prop];\n    if ('function' == typeof val) return val.call(obj, str);\n    if (negate) val = !val;\n    if (val) return str;\n    return '';\n  };\n\n  return \"Hello \" + escape(obj.name) + \"! \" + section(obj, \"authenticated\", true, \"<a href=\\\"/login\\\">login</a>\") + \"\\n\"\n}\n```\n\n## API\n\n### minstache(string, [obj])\n\n  Compile and render the given mustache `string` with optional context `obj`.\n\n### minstache.compile(string)\n\n  Compile the mustache `string` to a stand-alone `Function` accepting a context `obj`.\n\n## Divergence\n\n  Minstache also allows `{` as an alias of `{{` to reduce the noise.\n\n  Partials are not supported, this lib is meant to be a small template engine solution for stand-alone [component](http://github.com/component) templates. If your template takes \"partials\" then pass other rendered strings to it. If you need a full-blown mustache solution Hogan.js is still great.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "_id": "minstache@0.0.1",
  "dist": {
    "shasum": "d4446f08f607550f13c6c4f5656be4a628934a46"
  },
  "_from": "minstache@0.0.1",
  "_resolved": "https://registry.npmjs.org/minstache/-/minstache-0.0.1.tgz",
  "scripts": {}
}
