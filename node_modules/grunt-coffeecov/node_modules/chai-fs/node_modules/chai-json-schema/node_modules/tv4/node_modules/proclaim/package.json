{
  "name": "proclaim",
  "version": "1.4.0",
  "description": "A simple assertion library for server and client side JavaScript",
  "keywords": [
    "assert",
    "test"
  ],
  "author": {
    "name": "Rowan Manning",
    "url": "http://rowanmanning.co.uk/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rowanmanning/proclaim.git"
  },
  "homepage": "https://github.com/rowanmanning/proclaim",
  "bugs": {
    "url": "https://github.com/rowanmanning/proclaim/issues"
  },
  "engines": {
    "node": ">=0.6"
  },
  "devDependencies": {
    "jshint": "~2.1",
    "mocha": "~1.11",
    "mocha-srv": "~0.1"
  },
  "main": "./lib/proclaim.js",
  "scripts": {
    "test": "make test"
  },
  "readme": "\nProclaim\n========\n\nA simple assertion library for server and client side JavaScript. Proclaim can be used with most test frameworks.\n\n**Current Version:** *1.4.0*  \n**Build Status:** [![Build Status][travis-status]][travis]  \n**Node Support:** *0.6, 0.8, 0.10*  \n**Browser Support:** *Android Browser 2.2–4.2, Firefox 3.6, Firefox 4–19, Google Chrome 14–25, Internet Explorer 6–10, Mobile Safari iOS 3–6, Opera 12.10, Safari 5–6*\n\n\nWhy?\n----\n\nI've been frustrated by assertion libraries not working in all the browsers I test my code in (notably IE 6–8). Proclaim is an attempt to achieve the simplicity of [Node.js assert][node-assert] with the extra assertions of [Chai][chai].\n\nProclaim implements all of the assertions in [CommonJS Unit Testing 1.0][commonjs-unit] which means it works as a drop-in replacement for the Node.js assert module. It also implements most of Chai's assertions so you should be able to switch quite easily.\n\n\nGetting Started\n---------------\n\nYou can use Proclaim on the server side with [Node.js][node] and npm:\n\n```sh\n$ npm install proclaim\n```\n\nOn the client side, you can either install Proclaim through [Bower][bower]/[Component][component]:\n\n```sh\n$ bower install proclaim\n$ component install rowanmanning/proclaim\n```\n\nor by simply including `proclaim.js` in your page:\n\n```html\n<script src=\"path/to/lib/proclaim.js\"></script>\n```\n\n\nUsage\n-----\n\nIn Node.js or using Component, you can include Proclaim in your script by using require:\n\n```js\nvar proclaim = require('proclaim');\n\n// Or if you prefer to use 'assert' terminology:\nvar assert = require('proclaim');\n```\n\nProclaim also works with AMD-style module loaders, just specify it as a dependency.\n\nIf you're just including with a `<script>`, `proclaim` is available as a global variable.\n\n\nAssertions\n----------\n\nAll assertions throw `AssertionError` if they fail.\n\n\n### proclaim.fail( actual, expected, [message], [operator] )\n\nThrow an assertion error.\n\n```js\nproclaim.fail('foo', 'bar', 'Foo equals bar', '===');\n```\n\n\n### proclaim.ok( value, [message] )\n\nAssert that `value` is truthy.\n\n\n### proclaim.equal( actual, expected, [message] )\n\nAssert that `actual == expected`.\n\n\n### proclaim.notEqual( actual, expected, [message] )\n\nAssert that `actual != expected`.\n\n\n### proclaim.strictEqual( actual, expected, [message] )\n\nAssert that `actual === expected`.\n\n\n### proclaim.notStrictEqual( actual, expected, [message] )\n\nAssert that `actual !== expected`.\n\n\n### proclaim.deepEqual( actual, expected, [message] )\n\nAssert that `actual` is deeply equal to `expected`.\n\n\n### proclaim.notDeepEqual( actual, expected, [message] )\n\nAssert that `actual` is not deeply equal to `expected`.\n\n\n### proclaim.throws( fn, [expected], [message] )\n\nAssert that `fn` throws an error. If `expected` is present then the thrown `error` will be tested as follows:\n\n- If `expected` is a function, assert that `error intanceof expected`\n- If `expected` is a string, assert that `error.message === expected`\n- If `expected` is a RegExp, assert that `expected.test(error) === true`\n\n\n### proclaim.doesNotThrow( fn, [expected], [message] )\n\nAssert that `fn` does not throw an error. If `expected` is present then the assertion is that an error can be thrown, but it does not pass the tests outlined in `proclaim.throws`.\n\n\n### proclaim.isTypeOf( actual, expected, [message] )\n\nAssert that `typeof actual === expected`.\n\n\n### proclaim.isNotTypeOf( actual, expected, [message] )\n\nAssert that `typeof actual !== expected`.\n\n\n### proclaim.isInstanceOf( actual, expected, [message] )\n\nAssert that `actual instanceof expected`.\n\n\n### proclaim.isNotInstanceOf( actual, expected, [message] )\n\nAssert that `!(actual instanceof expected)`.\n\n\n### proclaim.isArray( value, [message] )\n\nAssert that `value` is an `array`.\n\n\n### proclaim.isNotArray( value, [message] )\n\nAssert that `value` is not an `array`.\n\n\n### proclaim.isBoolean( value, [message] )\n\nAssert that `value` is a `boolean`.\n\n\n### proclaim.isNotBoolean( value, [message] )\n\nAssert that `value` is not a `boolean`.\n\n\n### proclaim.isTrue( value, [message] )\n\nAssert that `value === true`.\n\n\n### proclaim.isFalse( value, [message] )\n\nAssert that `value === false`.\n\n\n### proclaim.isFunction( value, [message] )\n\nAssert that `value` is a `function`.\n\n\n### proclaim.isNotFunction( value, [message] )\n\nAssert that `value` is not a `function`.\n\n\n### proclaim.isNull( value, [message] )\n\nAssert that `value === null`.\n\n\n### proclaim.isNotNull( value, [message] )\n\nAssert that `value !== null`.\n\n\n### proclaim.isNumber( value, [message] )\n\nAssert that `value` is a `number`.\n\n\n### proclaim.isNotNumber( value, [message] )\n\nAssert that `value` is not a `number`.\n\n\n### proclaim.isObject( value, [message] )\n\nAssert that `value` is an `object`.\n\n\n### proclaim.isNotObject( value, [message] )\n\nAssert that `value` is not an `object`.\n\n\n### proclaim.isString( value, [message] )\n\nAssert that `value` is a `string`.\n\n\n### proclaim.isNotString( value, [message] )\n\nAssert that `value` is not a `string`.\n\n\n### proclaim.isUndefined( value, [message] )\n\nAssert that `value === undefined`.\n\n\n### proclaim.isDefined( value, [message] )\n\nAssert that `value !== undefined`.\n\n\n### proclaim.match( actual, expected, [message] )\n\nAssert that `actual` matches the RegExp in `expected`.\n\n\n### proclaim.notMatch( actual, expected, [message] )\n\nAssert that `actual` does not match the RegExp in `expected`.\n\n\n### proclaim.includes( haystack, needle, [message] )\n\nAssert that `haystack` contains `needle`. For strings and arrays, this asserts that `indexOf` returns a value other than `-1`. For objects, this method asserts that `needle` is the name of a property on `haystack`.\n\n\n### proclaim.doesNotInclude( haystack, needle, [message] )\n\nAssert that `haystack` does not contain `needle`. See [proclaim.includes](#proclaimincludes-haystack-needle-message-).\n\n\n### proclaim.length( value, expected, [message] )\n\nAssert that `value.length === expected`.\n\n\nDevelopment\n-----------\n\nTo develop Proclaim, you'll need to clone the repo and install dependencies with `make deps`. If you're on Windows, you'll also need to install [Make for Windows][make].\n\nOnce you're set up, you can run the following commands:\n\n```sh\n$ make deps         # Install dependencies\n$ make lint         # Run JSHint with the correct config\n$ make test         # Run unit tests in Node\n$ make test-server  # Run a server for browser unit testing (visit localhost:3000)\n```\n\nWhen no build target is specified, make will run `deps lint test`. This means you can use the following command for brevity:\n\n```sh\n$ make\n```\n\nCode with lint errors or no/failing tests will not be accepted, please use the build tools outlined above.\n\n\nLicense\n-------\n\nProclaim is licensed under the [MIT][mit] license.\n\n\n\n[bower]: http://bower.io/\n[chai]: http://chaijs.com/\n[commonjs-unit]: http://wiki.commonjs.org/wiki/Unit_Testing/1.0#Assert\n[component]: https://github.com/component/component\n[make]: http://gnuwin32.sourceforge.net/packages/make.htm\n[mit]: http://opensource.org/licenses/mit-license.php\n[node]: http://nodejs.org/\n[node-assert]: http://nodejs.org/api/assert.html\n[travis]: https://travis-ci.org/rowanmanning/proclaim\n[travis-status]: https://travis-ci.org/rowanmanning/proclaim.png?branch=master\n",
  "readmeFilename": "README.md",
  "_id": "proclaim@1.4.0",
  "dist": {
    "shasum": "bc58e783597f28c7f838308862aba7eb838070ca"
  },
  "_from": "proclaim@1.4",
  "_resolved": "https://registry.npmjs.org/proclaim/-/proclaim-1.4.0.tgz"
}
